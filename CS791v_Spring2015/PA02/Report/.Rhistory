demo()
ls
cd /
asdf
read.table("~/Desktop/STAT775/HW01/ex_2_8_data_set/zip.test")
zip <- read.table("~/Desktop/STAT775/HW01/ex_2_8_data_set/zip.test")
zip.filtered
zip.train.
zip.train
drop zip
View(zip)
View(zip)
View(zip)
Drop(zip)
Delete(zip)
rm(zip)
zip.train
zip.train.filtered
library('ProjectTemplate')
load.project()
model <- lm(Y ~ ., data = zip . train . filtered )
model <- lm(Y ~ . )
zip.train <- read.table("zip.train")
ls
help
help()
help(console)
??console
zip.train <- read.table("~/Desktop/STAT775/HW01/ex_2_8_data_set/zip.test")
zip.train
zip.train.filtered
View(zip.train)
whatis zip.train
?zip.train
Whatis(zip.train)
library(reshape2)
library(mclust)
citation("mclust")
setwd("~/Desktop/CS791v_Spring2014/PA02/Report")
results.table <- read.csv("results.csv")
a <- list(1,2,3)
b <- list('a','b','c')
c <- list(5,6,7)
d <- data.frame(a, b)
d
d <- data.frame(cbind(a, b))
d
d$a
d$b
d <- d(cbind(c))
d <- data.frame(cbind(c))
d
d <- data.frame(cbind(a, b))
d <- data.frame(a=a, b=b)
d
d <- data.frame(1:3, a=a, b=b)
d
d <- data.frame(10:12, a=a, b=b)
d
d <- data.frame(10:12, a=t(a), b=t(b))
d
d <- data.frame(10:12, unlist(a), unlist(b))
d
f <- data.frame(d, 91:93)
f
s <- subset(f, max(f$unlist.a))
s <- subset(f, unlist.a = max(f$unlist.a))
s
colnames(f) <- c('one', 'two', 'three', 'four')
f
s <- subset(f, two = max(two))
s
s <- subset(f, two == max(two))
s
rm(d)
rm(f)
rm(s,a,b,c)
vector.sizes <- factor(results.table$Vector.Size)
levels(vector.sizes)
devices <- factor(results.table$Device.Type)
levels(devices)
devices <- levels(devices)
vector.sizes <- levels(vector.sizes)
900000 == vector.sizes[[1]]
vector.sizes[[1]]
900000 == as.numeric(vector.sizes[[1]])
for (size in vector.sizes) {}
for (size in vector.sizes) {print(i)}
for (size in vector.sizes) {print('hi')}
for (size in vector.sizes) {print(size)}
clear()
cls()
cls
clear
for (size in vector.sizes) {vector.size[[size]] <- as.numeric(size)}
subset(x = results.table, subset = results.table$Vector.Size == as.numeric(vector.sizes[[1]]))
a <- subset(x = results.table, subset = results.table$Vector.Size == as.numeric(vector.sizes[[1]]))
subset(a, results.table$Device.Type == devices[[2]])
a
subset(results.table, results.table$Device.Type == devices[[2]])
rm(all)
ls()
rm(ls())
rm(unlist(ls()))
rm(a)
rm(results.table)
rm(devices)
rm(size)
rm(vector.sizes)
results.table <- read.csv("results_final.csv")
levels(as.factor(results.table$Vector.Size))
3 %% 2
results.table <- subset(results.table, subset = results.table$Vector.Size %% 1000000 == 0)
levels(as.factor(results.table$Vector.Size))
devices <- results.table$Device.Type
devices <- levels(results.table$Device.Type)
vector.sizes <- lapply(levels(results.table$Vector.Size))
vector.sizes <- lapply(levels(results.table$Vector.Size), as.numeric)
levels(results.table$Vector.Size)
results.table$Vector.Size
vector.sizes <- lapply(levels(as.factor(results.table$Vector.Size)), as.numeric)
vector.sizes
working.set <- subset(results.table, results.table$Vector.Size == size)
speedups <- working.set$ComputeTime..s.
working.set <- subset(results.table, results.table$Vector.Size == vector.sizes[[1]])
speedups <- working.set$ComputeTime..s.
spedups
speedups
working.set
working.set <- subset(results.table, results.table$Vector.Size == vector.sizes[[1]])
speedups <- c(unlist(working.set$ComputeTime..s.))
speedups
c(unlist(working.set$ComputeTime..s.))
unlist(working.set$ComputeTime..s.)
working.set$ComputeTime..s.
str(working.set)
working.set$Device.Type
working.set$Compute.Time..s.
as.list(working.set$Compute.Time..s.)
speedups <- as.list(working.set$Compute.Time..s.)
speedups
length(working.set)
nrow(working.set)
sequential.row <- subset(working.set, working.set$Device.Type == devices[[2]])
sequential.row
which(sequential.row)
which(sequential.row$Vector.Size == 1000000)
sequential.row$Compute.Time..s. / working.set$Compute.Time..s.[[1]]
sequential.row$Compute.Time..s.
working.set$Compute.Time..s.
working.set$Compute.Time..s.[[1]]
a <- c(1,2,3)
b <- a
a[[1]] <- 99
rm(a,b)
sequential.row$Compute.Time..s.
a< c(1,2,3)
a<- c(1,2,3)
b<-c(a,b,c)
b <- c(a,b,c)
b <- c('a','b','c')
d <- data.frame(a, b)
d
d <- data.frame(d, e)
e <- NULL
d <- data.frame(d, e)
rep(0, 3)
d <- data.frame(d, rep(0, nrow(d)))
d
d <- data.frame(d, lab=rep(0, nrow(d)))
d
results.table <- data.frame(
results.table,
Compute.Speedup = rep(0, nrow(results.table)),
Total.Speedup = rep(0, nrow(results.table))
)
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[1]] &&
results.table$Device.Type == devices[[2]]
)
corresponding.sequential.trial
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[2]] &&
results.table$Device.Type == devices[[2]]
)
results.table$Vector.Size[[1]]
devices[[2]]
setwd("~/Desktop/CS791v_Spring2014/PA02/Report")
results.table <- read.csv("results.csv")
subset(results.table, results.table$Device.Type == "Windows with i5")
results.table <- data.frame(
results.table,
Compute.Speedup = rep(0, nrow(results.table)),
Total.Speedup = rep(0, nrow(results.table))
)
vices <- levels(results.table$Device.Type)
vecto
devices <- levels(results.table$Device.Type)
vector.sizes <- lapply(levels(as.factor(results.table$Vector.Size)), as.numeric)
rm(vices)
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[2]] &&
results.table$Device.Type == devices[[2]]
)
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[2]] &
results.table$Device.Type == devices[[2]]
)
corresponding.sequential.trial
for (i in 1:nrow(results.table)) {
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[i]] &&
results.table$Device.Type == devices[[2]]
)
results.table$Compute.Speedup[[i]] <-
results.table$Compute.Time..s.[[i]] /
corresponding.sequential.trial$Compute.Time..s.
results.table$Total.Speedup[[i]] <-
results.table$Total.Time..s.[[i]] /
corresponding.sequential.trial$Compute.Time..s.
}
results.tabl$Compute.Speedup
results.table$Compute.Speedup[[1]] <- 1
results.table$Compute.Time..s.[[1]] /
corresponding.sequential.trial$Compute.Time..s.
results.table$Compute.Time..s.[[1]]
corresponding.sequential.trial$Compute.Time..s.
for (i in 1:nrow(results.table)) {
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[i]] &
results.table$Device.Type == devices[[2]]
)
results.table$Compute.Speedup[[i]] <-
results.table$Compute.Time..s.[[i]] /
corresponding.sequential.trial$Compute.Time..s.
results.table$Total.Speedup[[i]] <-
results.table$Total.Time..s.[[i]] /
corresponding.sequential.trial$Compute.Time..s.
}
corresponding.sequential.trial
corresponding.sequential.trial[[1]]
corresponding.sequential.trial[1, ]
for (i in 1:nrow(results.table)) {
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[i]] &
results.table$Device.Type == devices[[2]]
)
if (nrow(corresponding.sequential.trial) > 1) {
corresponding.sequential.trial <- corresponding.sequential.trial[1, ]
}
results.table$Compute.Speedup[[i]] <-
results.table$Compute.Time..s.[[i]] /
corresponding.sequential.trial$Compute.Time..s.
results.table$Total.Speedup[[i]] <-
results.table$Total.Time..s.[[i]] /
corresponding.sequential.trial$Compute.Time..s.
}
results.table$Compute.Speedup[1:10]
subset(results.table, results.table$Compute.Speedup == max(results.table$Compute.Speedup))
subset(results.table, results.table$Vector.Size < 2000000)
(results.table[order(-results.table$Compute.Speedup), ])[1:10, ]
(results.table[order(-results.table$Compute.Speedup, -results.table$Vector.Size), ])[1:10, ]
(results.table[order(-results.table$Compute.Speedup, -results.table$Vector.Size), ])[1:20, c(1,2,11)]
(results.table[order(-results.table$Compute.Speedup, -results.table$Vector.Size), ])[1:20, c(1,2,8,9,11)]
ideal.threads.blocks <- subset(results.table, results.table$Number.of.GPU.Blocks == 65535, results.table$Number.of.Threads.per.Block == 1024)
ideal.threads.blocks <- subset(results.table, results.table$Number.of.GPU.Blocks == 65535, results.table$Number.of.Threads.per.Block == 1024)
ideal.threads.blocks <- subset(results.table, results.table$Number.of.GPU.Blocks == 65535 & results.table$Number.of.Threads.per.Block == 1024)
ideal.threads.blocks
good.size <- subset(results.table, results.table$Vector.Size == 4500000)
good.size.plottable <- data.frame(
"Device" = results.table$Device.Type,
"Vector Size" = results.table$Vector.Size,
"Compute Time (s)" = results.table$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = results.table$Total.Time..s.,
"Compute Throughput (int/s)" = results.table$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = results.table$Total.Time..s.,
"Speedup" = results.table$Compute.Speedup
)
good.size.plottable
good.size.plottable[1:10]
good.size.plottable[1:10, ]
good.size.plottable <- data.frame(
"Device" = good.size$Device.Type,
"Vector Size" = good.size$Vector.Size,
"Compute Time (s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = good.size$Total.Time..s.,
"Compute Throughput (int/s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = good.size$Total.Time..s.,
"Speedup" = good.size$Compute.Speedup
)
good.size.plottable[1:10, ]
ideal.threads.blocks.plottable <- data.frame(
"Device" = good.size$Device.Type,
"Vector Size" = good.size$Vector.Size,
"Compute Time (s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = good.size$Total.Time..s.,
"Compute Throughput (int/s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = good.size$Total.Time..s.,
)
ideal.threads.blocks.plottable <- data.frame(
"Device" = ideal.threads.blocks$Device.Type,
"Vector Size" = ideal.threads.blocks$Vector.Size,
"Compute Time (s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = ideal.threads.blocks$Total.Time..s.,
"Compute Throughput (int/s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = ideal.threads.blocks$Total.Time..s.
)
ggplot(
data= ideal.threads.blocks.plottable,
aes(
x = "Vector Size",
y = "Runtime (s)",
group = "Type",
)) + geom_line() + geom_point()
library(ggplot2)
ggplot(
data= ideal.threads.blocks.plottable,
aes(
x = "Vector Size",
y = "Runtime (s)",
group = "Type",
)) + geom_line() + geom_point()
ggplot(
data= ideal.threads.blocks.plottable,
aes(
x = Vector Size,
y = Runtime (s),
group = Type,
)) + geom_line() + geom_point()
melt(ideal.threads.blocks.plottable)
library(reshape2)
melt(ideal.threads.blocks.plottable)
ggplot(
data= ideal.threads.blocks.plottable,
aes(
x = "Vector Size",
y = "Runtime (s)",
group = "Type",
)) + geom_line() + geom_point()
write.table(good.size.plottable, file = "block_thread.csv", sep = ',')
write.table(good.size.plottable, file = "good_size.csv", sep = ',')
write.table(ideal.threads.blocks.plottable, file = "block_thread.csv", sep = ',')
ideal.threads.blocks.plottable <- data.frame(
"Device" = ideal.threads.blocks$Device.Type,
"Vector Size" = ideal.threads.blocks$Vector.Size,
"Blocks" = rep(65535, nrow(ideal.threads.blocks)),
"Threads" = rep(1024, nrow(ideal.threads.blocks)),
"Compute Time (s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = ideal.threads.blocks$Total.Time..s.,
"Compute Throughput (int/s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = ideal.threads.blocks$Total.Time..s.
)
write.table(ideal.threads.blocks.plottable, file = "block_thread.csv", sep = ',')
good.size.plottable <- data.frame(
"Device" = good.size$Device.Type,
"Vector Size" = good.size$Vector.Size,
"Blocks" = good.size$Number.of.GPU.Blocks,
"Threads" = good.size$Number.of.Threads.per.Block,
"Compute Time (s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = good.size$Total.Time..s.,
"Compute Throughput (int/s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = good.size$Total.Time..s.,
"Speedup" = good.size$Compute.Speedup
)
write.table(good.size.plottable, file = "good_size.csv", sep = ',')
ideal.threads.blocks.plottable <- data.frame(
"Device" = ideal.threads.blocks$Device.Type,
"Vector Size" = ideal.threads.blocks$Vector.Size,
"Blocks" = rep(65535, nrow(ideal.threads.blocks)),
"Threads" = rep(1024, nrow(ideal.threads.blocks)),
"Compute Time (s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = ideal.threads.blocks$Total.Time..s.,
"Compute Throughput (int/s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = ideal.threads.blocks$Total.Time..s.
)
write.table(ideal.threads.blocks.plottable, file = "block_thread.csv", sep = ',')
write.table(good.size.plottable, file = "good_size.csv", sep = ',')
results.table[1:10, ]
results.table[order(-results.table$Compute.Speedup),]
results.table[order(-results.table$Compute.Speedup),][1:10,]
results.table["8991", "Compute.Time..s."]
subset(results.table, results.table$Vector.Size==1100000 & results.table$Device.Type == "Windows with i5")
for (i in 1:nrow(results.table)) {
corresponding.sequential.trial <- subset(
results.table,
results.table$Vector.Size == results.table$Vector.Size[[i]] &
results.table$Device.Type == devices[[2]]
)
if (nrow(corresponding.sequential.trial) > 1) {
corresponding.sequential.trial <- corresponding.sequential.trial[1, ]
}
results.table$Compute.Speedup[[i]] <-
corresponding.sequential.trial$Compute.Time..s. /
results.table$Compute.Time..s.[[i]]
results.table$Total.Speedup[[i]] <-
corresponding.sequential.trial$Compute.Time..s. /
results.table$Total.Time..s.[[i]]
}
(results.table[order(-results.table$Compute.Speedup), ])[1:10, ]
(results.table[order(-results.table$Compute.Speedup, -results.table$Vector.Size), ])[1:20, c(1,2,8,9,11)]
ideal.threads.blocks <- subset(results.table, results.table$Number.of.GPU.Blocks == 65535 & results.table$Number.of.Threads.per.Block == 1024)
ideal.threads.blocks.plottable <- data.frame(
"Device" = ideal.threads.blocks$Device.Type,
"Vector Size" = ideal.threads.blocks$Vector.Size,
"Blocks" = rep(65535, nrow(ideal.threads.blocks)),
"Threads" = rep(1024, nrow(ideal.threads.blocks)),
"Compute Time (s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = ideal.threads.blocks$Total.Time..s.,
"Compute Throughput (int/s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = ideal.threads.blocks$Total.Time..s.
)
write.table(ideal.threads.blocks.plottable, file = "block_thread.csv", sep = ',')
good.size <- subset(results.table, results.table$Vector.Size == 4500000)
good.size.plottable <- data.frame(
"Device" = good.size$Device.Type,
"Vector Size" = good.size$Vector.Size,
"Blocks" = good.size$Number.of.GPU.Blocks,
"Threads" = good.size$Number.of.Threads.per.Block,
"Compute Time (s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = good.size$Total.Time..s.,
"Compute Throughput (int/s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = good.size$Total.Time..s.,
"Speedup" = good.size$Compute.Speedup
)
write.table(good.size.plottable, file = "good_size.csv", sep = ',')
ideal.threads.blocks <- subset(results.table, results.table$Number.of.GPU.Blocks == 63 & results.table$Number.of.Threads.per.Block == 256)
ideal.threads.blocks.plottable <- data.frame(
"Device" = ideal.threads.blocks$Device.Type,
"Vector Size" = ideal.threads.blocks$Vector.Size,
"Blocks" = rep(63, nrow(ideal.threads.blocks)),
"Threads" = rep(256, nrow(ideal.threads.blocks)),
"Compute Time (s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = ideal.threads.blocks$Total.Time..s.,
"Compute Throughput (int/s)" = ideal.threads.blocks$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = ideal.threads.blocks$Total.Time..s.
)
write.table(ideal.threads.blocks.plottable, file = "block_thread.csv", sep = ',')
good.size <- subset(results.table, results.table$Vector.Size == 14000000)
good.size.plottable <- data.frame(
"Device" = good.size$Device.Type,
"Vector Size" = good.size$Vector.Size,
"Blocks" = good.size$Number.of.GPU.Blocks,
"Threads" = good.size$Number.of.Threads.per.Block,
"Compute Time (s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Time (s)" = good.size$Total.Time..s.,
"Compute Throughput (int/s)" = good.size$Compute.Time..s.,
"Total [Compute + Xfer] Throughput (int/s)" = good.size$Total.Time..s.,
"Speedup" = good.size$Compute.Speedup
)
write.table(good.size.plottable, file = "good_size.csv", sep = ',')
